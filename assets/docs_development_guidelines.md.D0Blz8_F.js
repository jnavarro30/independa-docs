import{_ as i,c as l,o as a,ae as t}from"./chunks/framework.Byi7L62k.js";const m=JSON.parse('{"title":"Guidelines","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/development/guidelines.md","filePath":"docs/development/guidelines.md"}'),n={name:"docs/development/guidelines.md"};function o(r,e,s,d,u,p){return a(),l("div",null,e[0]||(e[0]=[t('<h1 id="guidelines" tabindex="-1">Guidelines <a class="header-anchor" href="#guidelines" aria-label="Permalink to &quot;Guidelines&quot;">​</a></h1><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><ol><li><a href="#general-coding-guidelines">General Coding Guidelines</a></li><li><a href="#coding-standards-&amp;-tools">Coding Standards &amp; Tools</a></li><li><a href="#code-style-&amp;-formatting">Code Style &amp; Formatting</a></li><li><a href="#linting">Linting</a></li><li><a href="#continuous-integration">Continuous Integration</a></li></ol><h2 id="general-coding-guidelines" tabindex="-1">General Coding Guidelines <a class="header-anchor" href="#general-coding-guidelines" aria-label="Permalink to &quot;General Coding Guidelines&quot;">​</a></h2><ul><li><p>Follow clean code principles (small functions, meaningful variable names).</p></li><li><p>Document public functions and components with docstrings/JSDoc.</p></li><li><p>Avoid duplicating code (DRY) — prefer utility functions.</p></li><li><p>Always write/update unit tests for new features or fixes.</p></li></ul><h2 id="coding-standards-tools" tabindex="-1">Coding Standards &amp; Tools <a class="header-anchor" href="#coding-standards-tools" aria-label="Permalink to &quot;Coding Standards &amp; Tools&quot;">​</a></h2><p>To maintain consistency, readability, and quality across the Independa/EverThrive codebase, all contributors must follow the standards below.</p><h2 id="code-style-formatting" tabindex="-1">Code Style &amp; Formatting <a class="header-anchor" href="#code-style-formatting" aria-label="Permalink to &quot;Code Style &amp; Formatting&quot;">​</a></h2><ul><li><p>All code must be auto-formatted before commit.</p></li><li><p>Use the configured formatter for your language/framework:</p></li><li><p>JavaScript → Prettier</p></li><li><p>CSS/SCSS → Prettier + Stylelint</p></li></ul><h2 id="linting" tabindex="-1">Linting <a class="header-anchor" href="#linting" aria-label="Permalink to &quot;Linting&quot;">​</a></h2><ul><li><p>Linters must pass with no errors before code can be merged.</p></li><li><p>Configurations are defined in the repo (.eslintrc.js).</p></li></ul><p>Tools:</p><ul><li><p>JavaScript: ESLint with Airbnb rules</p></li><li><p>CSS/SCSS: Stylelint</p></li></ul><p>Run manually:</p><ul><li>npm run lint # JS/TS/CSS lint check</li></ul><h2 id="continuous-integration" tabindex="-1">Continuous Integration <a class="header-anchor" href="#continuous-integration" aria-label="Permalink to &quot;Continuous Integration&quot;">​</a></h2><ul><li><p>CI pipeline will run lint/format checks on all pull requests.</p></li><li><p>Pull requests will not be merged if:</p></li><li><p>Lint errors exist</p></li><li><p>Code is not formatted properly</p></li><li><p>Tests fail</p></li></ul>',17)]))}const g=i(n,[["render",o]]);export{m as __pageData,g as default};
