import{_ as e,c as a,o as i,ae as n}from"./chunks/framework.Byi7L62k.js";const h=JSON.parse('{"title":"Guidelines","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/development/guidelines.md","filePath":"docs/development/guidelines.md"}'),d={name:"docs/development/guidelines.md"};function r(l,t,o,s,u,c){return i(),a("div",null,t[0]||(t[0]=[n('<h1 id="guidelines" tabindex="-1">Guidelines <a class="header-anchor" href="#guidelines" aria-label="Permalink to &quot;Guidelines&quot;">​</a></h1><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><ol><li><a href="#general-coding-guidelines">General Coding Guidelines</a></li><li><a href="#coding-standards-&amp;-tools">Coding Standards &amp; Tools</a></li><li><a href="#code-style-&amp;-formatting">Code Style &amp; Formatting</a></li><li><a href="#linting">Linting</a></li><li><a href="#continuous-integration">Continuous Integration</a></li></ol><h2 id="general-coding-guidelines" tabindex="-1">General Coding Guidelines <a class="header-anchor" href="#general-coding-guidelines" aria-label="Permalink to &quot;General Coding Guidelines&quot;">​</a></h2><ul><li><p>Follow clean code principles (small functions, meaningful variable names).</p></li><li><p>Document public functions and components with docstrings/JSDoc.</p></li><li><p>Avoid duplicating code (DRY) — prefer utility functions.</p></li><li><p>Always write/update unit tests for new features or fixes.</p></li></ul><h2 id="coding-standards-tools" tabindex="-1">Coding Standards &amp; Tools <a class="header-anchor" href="#coding-standards-tools" aria-label="Permalink to &quot;Coding Standards &amp; Tools&quot;">​</a></h2><p>To maintain consistency, readability, and quality across the Independa/EverThrive codebase, all contributors must follow the standards below.</p><h2 id="code-style-formatting" tabindex="-1">Code Style &amp; Formatting <a class="header-anchor" href="#code-style-formatting" aria-label="Permalink to &quot;Code Style &amp; Formatting&quot;">​</a></h2><ul><li><p>All code must be auto-formatted before commit.</p></li><li><p>Use the configured formatter for your language/framework:</p></li><li><p>JavaScript → Prettier</p></li><li><p>CSS/SCSS → Prettier + Stylelint</p></li></ul><h3 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;Prettier&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>singleQuote</td><td>true</td><td>-</td></tr><tr><td>semi</td><td>true</td><td>-</td></tr><tr><td>trailingComma</td><td>&#39;all&#39;</td><td>-</td></tr><tr><td>bracketSpacing</td><td>true</td><td>-</td></tr><tr><td>arrowParens</td><td>&#39;always&#39;</td><td>functions should always have parens around it&#39;s args</td></tr><tr><td>printWidth</td><td>400</td><td>Let&#39;s try and avoid wrapping</td></tr><tr><td>endOfLine</td><td>&#39;auto&#39;</td><td>Don’t force any particular newline style — just match what’s already in the file or system.</td></tr></tbody></table><h3 id="pug-if-necessary" tabindex="-1">Pug (if necessary) <a class="header-anchor" href="#pug-if-necessary" aria-label="Permalink to &quot;Pug (if necessary)&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>pugSingleQuote</td><td>true</td><td>-</td></tr><tr><td>pugPrintWidth</td><td>400</td><td>-</td></tr><tr><td>pugClassNotation</td><td>&#39;attribute&#39;</td><td>-</td></tr><tr><td>pugBracketSpacing</td><td>null</td><td>-</td></tr></tbody></table><h2 id="linting" tabindex="-1">Linting <a class="header-anchor" href="#linting" aria-label="Permalink to &quot;Linting&quot;">​</a></h2><ul><li><p>Linters must pass with no errors before code can be merged.</p></li><li><p>Configurations are defined in the repo (.eslintrc.js).</p></li></ul><h3 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Rule</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>&#39;no-console&#39;</td><td>process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;</td><td>-</td></tr><tr><td>&#39;no-debugger&#39;</td><td>process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;</td><td>-</td></tr><tr><td>eqeqeq</td><td>[&#39;warn&#39;, &#39;always&#39;]</td><td>strict ===</td></tr><tr><td>&#39;object-curly-spacing&#39;</td><td>[&#39;warn&#39;, &#39;always&#39;]</td><td>-</td></tr><tr><td>&#39;no-unused-vars&#39;</td><td>&#39;warn&#39;</td><td>-</td></tr><tr><td>&#39;vue/max-attributes-per-line&#39;</td><td>[&#39;warn&#39;, { singleline: { max: 100 }, multiline: { max: 1 } } ],</td><td>-</td></tr></tbody></table><p>Run manually:</p><ul><li>npm run lint # JS/TS/CSS lint check</li></ul><h2 id="continuous-integration" tabindex="-1">Continuous Integration <a class="header-anchor" href="#continuous-integration" aria-label="Permalink to &quot;Continuous Integration&quot;">​</a></h2><ul><li><p>CI pipeline will run lint/format checks on all pull requests.</p></li><li><p>Pull requests will not be merged if:</p></li><li><p>Lint errors exist</p></li><li><p>Code is not formatted properly</p></li><li><p>Tests fail</p></li></ul>',21)]))}const g=e(d,[["render",r]]);export{h as __pageData,g as default};
